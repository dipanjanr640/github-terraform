# This is a basic workflow to help you get started with Actions
name: Infra deployement
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:
  workflow_call:  # This makes it a reusable workflow
    inputs:
      env:
        required: true
        type: string
      app:
        required: true
        type: string
      event_name:
        required: true
        type: string
    secrets:
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      SUBSCRIPTION_ID:
        required: true
      TENANT_ID:
        required: true
      ACCESS_KEY:
        required: true
      GH_TOKEN:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ENV: ${{ inputs.env }}
      APP: ${{ inputs.app }}
      ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
    defaults:
      run:
        working-directory: infrastructure/environment/${{ inputs.env }}/${{ inputs.app }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4

      - name: configure terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: set backend details
        run: |
          echo "STORAGE_ACCOUNT=${ENV}${APP}infrastorage" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${ENV}-${APP}-terraform-backend" >> $GITHUB_ENV
          echo "KEY=terraform.tfstate" >> $GITHUB_ENV
      
      - name: correct format
        run: terraform fmt
      
      - name: Initiate terraform
        run: |
          terraform init -backend-config="storage_account_name=${STORAGE_ACCOUNT}" \
                         -backend-config="container_name=${CONTAINER_NAME}" \
                         -backend-config="key=${KEY}" \
                         -backend-config="access_key=${ACCESS_KEY}"

      - name: Validate terraform
        id: validate
        run: terraform validate 
        
      - name : Terraform plan
        if: inputs.event_name == 'pull_request'
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

        #<<EOF and EOF mark the beginning and end of the multiline content.
        #Need to convert from tfplan to txt for non binaray human readable format
        run: |
          set +e
          terraform plan -no-color -out ${ENV}-${APP}.tfplan
          exit_code=$?
          echo "EXIT_CODE=$exit_code" >> $GITHUB_ENV
          exit 0

      - name: TF plan file
        if: env.EXIT_CODE == '0'
        run : |          
          terraform show -no-color ${ENV}-${APP}.tfplan > ${ENV}-${APP}-tfplan.txt
          echo "TF_OUTPUT_PLAN <<EOF" >> $GITHUB_ENV
          cat ${ENV}-${APP}-tfplan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        
      - name: Comment on PR
        if: inputs.event_name == 'pull_request' &&  env.EXIT_CODE == '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = process.env.TF_OUTPUT_PLAN
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `### Terraform Plan Output\n\`\`\`\n${output}\n\`\`\``
            });

      - name: Approve and merger PR 
        if: inputs.event_name == 'pull_request' &&  env.EXIT_CODE == '0'
        run:  |
          gh pr review --approve ${{ github.event.pull_request.number }}
          gh pr merge --merge ${{ github.event.pull_request.number }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Reject PR
        if: inputs.event_name == 'pull_request' && env.EXIT_CODE != '0'
        run:  gh pr review --request-changes --body "Terraform Plan Failed. Fix errors before merging." ${{ github.event.pull_request.number }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Apply
        if: inputs.event_name == 'push'
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        run: terraform apply -auto-approve